"""
Django settings for aia_project project.

Generated by 'django-admin startproject' using Django 3.2.25.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path

import dj_database_url  # 1 Optional: Helps parse the database URL format
from decouple import config

import aia_project.logging
from core.utils.log_filter import ExcludeSQLFilter, ExcludeBadLogsFilter

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%18ixxe3%x*kt5t*oog&t7syt=bi1l0kcq)t%hhm82uq%3d94)'

# SECURITY WARNING: don't run with debug turned on in production!
ALLOWED_HOSTS = ["*", "localhost:8000"]
DEBUG = False

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CORS_ALLOW_ALL_ORIGINS = True

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'auth_app.apps.AuthConfig',
    'subscription',
    'core'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',  # Handles security-related tasks
    'django.middleware.common.CommonMiddleware',  # Common behaviors for requests
    'django.middleware.csrf.CsrfViewMiddleware',  # CSRF protection
    'django.contrib.sessions.middleware.SessionMiddleware',  # Session management
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication
    'django.contrib.messages.middleware.MessageMiddleware',  # Flash messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # Clickjacking protection
    'core.middlewares.exception_handler.ExceptionMiddleware',  # Custom response formatting
    # 'aia_project.middlewares.response_handler.APIResponseHandler',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware should be at the top
    'django.middleware.common.CommonMiddleware',
]

ROOT_URLCONF = 'aia_project.urls'

# Add this REST framework default authentication configuration:
REST_FRAMEWORK = {}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=int(config("ACCESS_TOKEN_LIFETIME"))),  # Token lifetime
    'REFRESH_TOKEN_LIFETIME': timedelta(days=int(config("REFRESH_TOKEN_LIFETIME"))),  # Refresh token lifetime
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
}

WSGI_APPLICATION = 'aia_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

AUTH_USER_MODEL = "auth_app.UserEntity"

DATABASES = {
    'default': dj_database_url.parse(config("DATABASE_URL"), conn_max_age=600),
}

# Email settings
EMAIL_BACKEND = config("EMAIL_BACKEND")
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT")
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Base logging configuration
LOGGING = aia_project.logging.LOGGING

# Dynamically adjust the logging handlers based on the environment
env = config('ENV')  # 'dev' or 'prod'

if env == 'dev':
    # In dev, log to console only (no file logging)
    LOGGING['loggers']['django']['handlers'] = ['console']
    LOGGING['loggers']['django.db.backends']['handlers'] = ['console']
    LOGGING['loggers']['django.db.backends']['level'] = 'DEBUG'
    LOGGING['loggers']['django.db.backends']['propagate'] = False
else:
    # In prod, log everything to file (both Django and SQL logs)
    LOGGING['root']['handlers'] = ['file']  # Write root logs to file
    LOGGING['loggers']['django']['handlers'] = ['file']
    LOGGING['loggers']['django.db.backends']['handlers'] = ['file_sql']  # SQL logs to a separate file
    LOGGING['loggers']['django.db.backends']['level'] = 'DEBUG'
    LOGGING['loggers']['django.db.backends']['propagate'] = False
